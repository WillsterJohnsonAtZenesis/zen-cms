/**
 * This proxy class is generated by `zx.io.remote.proxy.ClassWriter` and should not be edited manually
 * because it will be overwritten.
 *
 * To regenerate, use `zx create-proxies`, and the CMS server will automatically do the same during startup.
 *
 * Copyright and License - this file is copyright and licensed under the terms provided by the copyright owner, 
 * which presumably match the owner and license terms of the original source file.  It is your responsibility 
 * to determine ownership and terms.
 *

  
 * @use(zx.data.IndexedArray)
  
 * @use(zx.data.Map)
  


  
 * @require(zx.io.persistence.anno.Property)
  
 * @require(zx.io.remote.anno.Property)
  

 */
qx.Class.define("zx.server.auth.User", {
  extend: zx.server.Object,
  
    include: [ zx.server.auth.MUser ],
  

  construct(...vargs) {
    this.base(arguments, ...vargs);
    zx.io.remote.NetworkEndpoint.initialiseRemoteClass(zx.server.auth.User);
  },

  properties: {
    
      username: {
        
        
           check: "String", 
          nullable: false,
           event: "changeUsername", 
           apply: "_applyUsername", 
           transform: "_transformUsername", 
        
        "@": [new zx.io.persistence.anno.Property(), new zx.io.remote.anno.Property().set({ "clientEditable": false })]
      },
    
      fullName: {
         init: "Unnamed User", 
        
           check: "String", 
          nullable: false,
           event: "changeFullName", 
           apply: "_applyFullName", 
          
        
        "@": [new zx.io.persistence.anno.Property(), new zx.io.remote.anno.Property()]
      },
    
      password: {
         init: null, 
        
           check: "String", 
          nullable: true,
           event: "changePassword", 
           apply: "_applyPassword", 
          
        
        "@": [new zx.io.persistence.anno.Property(), new zx.io.remote.anno.Property().set({ "clientEditable": false })]
      },
    
      permissions: {
         init: null, 
        
           check: "zx.data.IndexedArray", 
          nullable: true,
           event: "changePermissions", 
           apply: "_applyPermissions", 
           transform: "_transformPermissions", 
        
        "@": [new zx.io.persistence.anno.Property(), new zx.io.remote.anno.Property().set({ "clientEditable": false })]
      },
    
      roles: {
         init: null, 
        
           check: "zx.data.IndexedArray", 
          nullable: true,
           event: "changeRoles", 
           apply: "_applyRoles", 
           transform: "_transformRoles", 
        
        "@": [new zx.io.persistence.anno.Property(), new zx.io.remote.anno.Property().set({ "clientEditable": false })]
      },
    
      state: {
         init: null, 
        
           check: "zx.data.Map", 
          nullable: true,
           event: "changeState", 
           apply: "_applyState", 
          
        
        "@": [new zx.io.persistence.anno.Property(), new zx.io.remote.anno.Property().set({ "clientEditable": false })]
      },
    
  },

  members: {
    
      _applyUsername(value, oldValue) {
        // Nothing - to be overridden
      },
    
      _applyFullName(value, oldValue) {
        // Nothing - to be overridden
      },
    
      _applyPassword(value, oldValue) {
        // Nothing - to be overridden
      },
    
      _applyPermissions(value, oldValue) {
        // Nothing - to be overridden
      },
    
      _applyRoles(value, oldValue) {
        // Nothing - to be overridden
      },
    
      _applyState(value, oldValue) {
        // Nothing - to be overridden
      },
    

    
      

      
        _transformUsername(value) {
        if (value) value = value.toLowerCase();
        return value;
      },
      
    
      

      
        _transformPermissions(value, oldValue) {
        if (!oldValue) return value;
        oldValue.replace(value || []);
        return oldValue;
      },
      
    
      

      
        _transformRoles(value, oldValue) {
        if (!oldValue) return value;
        oldValue.replace(value || []);
        return oldValue;
      },
      
    
  }
});
