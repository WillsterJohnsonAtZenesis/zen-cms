/**
 * This proxy class is generated by `zx.io.remote.proxy.ClassWriter` and should not be edited manually
 * because it will be overwritten.
 *
 * To regenerate, use `zx create-proxies`, and the CMS server will automatically do the same during startup.
 *
 * Copyright and License - this file is copyright and licensed under the terms provided by the copyright owner, 
 * which presumably match the owner and license terms of the original source file.  It is your responsibility 
 * to determine ownership and terms.
 *

  
 * @use(zx.cms.website.NavItem)
  
 * @use(qx.data.Array)
  


  
 * @require(zx.io.persistence.anno.Property)
  
 * @require(zx.io.remote.anno.Property)
  

 */
qx.Class.define("zx.cms.website.Site", {
  extend: zx.io.persistence.Object,

  construct(...vargs) {
    this.base(arguments, ...vargs);
    zx.io.remote.NetworkEndpoint.initialiseRemoteClass(zx.cms.website.Site);
  },

  properties: {
    title: {
      check: "String",
      nullable: false,
      event: "changeTitle",
      apply: "_applyTitle",

      "@": [new zx.io.persistence.anno.Property(), new zx.io.remote.anno.Property()]
    },

    rootNavigation: {
      init: null,

      check: "zx.cms.website.NavItem",
      nullable: true,
      event: "changeRootNavigation",
      apply: "_applyRootNavigation",

      "@": [new zx.io.persistence.anno.Property().set({ embed: true }), new zx.io.remote.anno.Property()]
    },

    urlRules: {
      check: "qx.data.Array",
      nullable: false,
      event: "changeUrlRules",
      apply: "_applyUrlRules",
      transform: "_transformUrlRules",

      "@": [new zx.io.persistence.anno.Property().set({ embed: true }), new zx.io.remote.anno.Property()]
    }
  },

  members: {
    _applyTitle(value, oldValue) {
      // Nothing - to be overridden
    },

    _applyRootNavigation(value, oldValue) {
      // Nothing - to be overridden
    },

    _applyUrlRules(value, oldValue) {
      // Nothing - to be overridden
    },

    _transformUrlRules(value, oldValue) {
      if (oldValue) {
        oldValue.replace(value);
        return oldValue;
      }

      return value;
    }
  }
});
