/**
 * This proxy class is generated by `zx.io.remote.proxy.ClassWriter` and should not be edited manually
 * because it will be overwritten.
 *
 * To regenerate, use `zx create-proxies`, and the CMS server will automatically do the same during startup.
 *
 * Copyright and License - this file is copyright and licensed under the terms provided by the copyright owner, 
 * which presumably match the owner and license terms of the original source file.  It is your responsibility 
 * to determine ownership and terms.
 *
{{?it.useClasses}}
  {{~ it.useClasses :classname }}
 * @use({{= classname }})
  {{~}}
{{?}}
{{?it.requireClasses}}
  {{~ it.requireClasses :classname }}
 * @require({{= classname }})
  {{~}}
{{?}}
 */
qx.Class.define("{{= it.classname }}", {
  extend: {{= it.superclassname }},
  {{? it.mixins }}
    include: [ {{= it.mixins.join(",") }} ],
  {{?}}

  construct(...vargs) {
    this.base(arguments, ...vargs);
    zx.io.remote.NetworkEndpoint.initialiseRemoteClass({{= it.classname }});
  },

  properties: {
    {{~ it.properties :property }}
      {{= property.name }}: {
        {{? property.init !== undefined }} init: {{= JSON.stringify(property.init) }}, {{?}}
        {{? property.refine }} 
          refine: true, 
        {{??}}
          {{? property.check }} check: {{= JSON.stringify(property.check) }}, {{?}}
          nullable: {{= !!property.nullable }},
          {{? property.event }} event: "{{= property.event }}", {{?}}
          {{? property.apply }} apply: "{{= property.apply }}", {{?}}
          {{? property.transform }} transform: "{{= property.transform }}", {{?}}
        {{?}}
        "@": {{= property.annoExpr }}
      },
    {{~}}
  },

  members: {
    {{~ it.properties :property }}
      {{= property.apply }}(value, oldValue) {
        // Nothing - to be overridden
      },
    {{~}}

    {{~ it.methods :method }}
      {{? method.annoExpr }}
      "@{{= method.name }}": {{= method.annoExpr }},
      {{?}}

      {{? method.code }}
        {{= method.code }},
      {{??}}
        {{= method.name}}() { 
          throw new Error("This object does not exist on the server yet, so remote method invocationm is not possible");
        },
      {{?}}
    {{~}}
  }
});
